#include <iostream>
#include <fstream>
#include "FilterIndex.h"

#define DATAPATH "/scratch/gg29/data/"

int main(int argc, char** argv)
{
    //default
    string metric = "L2";
    int mode = 0;
    string algo ="kmeans";
    size_t nc =0;
    size_t buffer_size =0;

    size_t d, nb, nq, num_results; 
    string datapath, Attripath, querypath, queryAttripath, indexpath, GTpath;
    int success = argparser(argc, argv, &datapath, &Attripath, &querypath, &queryAttripath, &indexpath, &GTpath, &nc, &algo, &mode, &buffer_size);

    float* data = fvecs_read(datapath.c_str(), &d, &nb);
    vector<vector<string>> properties = getproperties(Attripath,' ');
    // nc = atoi(argv[2]); // num clusters
    FilterIndex myFilterIndex(data, d, nb, nc, properties, algo, mode);
    myFilterIndex.loadIndex(indexpath);
    cout << "Loaded" << endl;

    float* queryset = fvecs_read(querypath.c_str(), &d, &nq);
    vector<vector<string>> queryprops = getproperties(queryAttripath,' ');
    int* queryGTlabel = ivecs_read(GTpath.c_str(), &num_results, &nq);
    cout << "Query files read..." << endl;
    // nq = 10000;
    chrono::time_point<chrono::high_resolution_clock> t1, t2;
    t1 = chrono::high_resolution_clock::now();
    
    myFilterIndex.query(queryset, nq, queryprops, num_results, buffer_size);
    t2 = chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = t2 - t1;

    int32_t* output = myFilterIndex.neighbor_set;
    int output_[num_results*nq];
    copy(output, output+num_results*nq , output_);
    cout<<"numClusters, buffersize, QPS, Recall100@100 :"<<endl;
    //QPS and recall
    double QPS;
    double recall = RecallAtK(queryGTlabel, output_, num_results, nq);
    printf("%d,%d,%f,%f\n",nc, buffer_size, nq/diff.count(), recall);
}


//For debug
// import numpy as np
// GT = np.array([32.8639,35.0298,35.1119,34.9958,32.9117,32.3254,32.1024,32.9789,32.1897,33.1286,34.7009,33.5818,35.0179,33.0687,33.8961,33.8246,32.4657,33.5618,33.9477,35.2841,35.1972,35.3357,34.4476,34.9553,34.9694,34.5889,33.0459,35.0501,35.0477,35.0193,33.6274,34.7038,33.8781,35.2661,34.9145,34.4361,33.043,35.3345,34.9796,34.0648,32.1641,34.0988,34.9353,32.677,34.4215,32.1975,32.1573,34.3076,32.4394,35.1088,32.0192,34.9712,34.7085,35.3026,35.318,32.4823,33.0465,34.4766,34.9204,31.2095,35.3084,33.8086,34.2093,29.9638,34.6409,35.071,34.2017,35.195,34.9158,34.3988,35.303,33.9997,34.2399,34.5549,34.7441,33.4951,34.2169,35.2651,33.5422,33.8361,34.6089,35.0443,34.8585,35.1901,35.1275,34.7977,32.5411,33.9688,34.7502,32.7668,33.6073,35.2367,33.464,34.2754,33.8024,31.4348,32.0629,35.0459,34.227,33.3053])
// Pr = np.array([32.8639,35.0298,34.9958,32.9117,32.3254,32.1024,32.9789,36.6696,32.1897,33.1286,35.7859,36.2376,34.7009,35.9593,33.5818,35.0179,33.0687,33.8961,33.8246,32.4657,33.5618,33.9477,35.1972,35.3357,35.4234,34.4476,34.5889,33.0459,35.0501,35.0477,35.0193,33.6274,34.7038,33.8781,35.4744,34.4361,33.043,34.9796,34.0648,32.1641,34.0988,34.9353,32.677,34.4215,32.1975,35.3385,32.1573,34.3076,32.4394,32.0192,35.7434,34.7085,35.318,32.4823,33.0465,34.4766,34.9204,31.2095,33.8086,34.2093,29.9638,34.6409,35.071,34.2017,36.1337,35.195,34.9158,34.3988,33.9997,34.2399,34.5549,35.5413,34.7441,33.4951,35.2651,33.5422,35.394,33.8361,35.0443,34.8585,35.1901,35.1275,34.7977,35.4555,32.5411,36.3973,33.9688,34.7502,32.7668,33.6073,33.464,35.6645,34.2754,33.8024,31.4348,35.4096,32.0629,35.0459,34.227,33.3053])

// 41701,45587,57891,59081,61487,86727,91034,107474,109205,109740,118050,132766,136813,138408,166656,180898,182805,187838,220326,223260,225740,226026,231026,251851,255436,263908,273841,308064,321076,340257,342420,342687,348356,355016,370745,374086,386246,389524,396004,398741,409590,412809,413255,446168,462426,468198,515824,539190,578422,581471,582768,594299,628822,632972,654993,656373,659013,666324,672761,676502,687575,715655,719054,734267,755117,755266,772905,793356,794401,803129,812136,820259,824170,826032,836175,841901,850366,858529,887302,897178,902567,913048,920117,945519,963829,975619,1017884,1035033,1041506,1046157,1062987,1077277,1083769,1130568,1139285,1146548,1151733,1167647,1167702,1173785,
// 41701,45587,59081,61487,86727,91034,107474,108894,109205,109740,115246,115625,118050,121367,132766,136813,138408,166656,180898,182805,187838,220326,225740,226026,228928,231026,263908,273841,308064,321076,340257,342420,342687,348356,352486,374086,386246,396004,398741,409590,412809,413255,446168,462426,468198,502294,515824,539190,578422,582768,613375,628822,654993,656373,659013,666324,672761,676502,715655,719054,734267,755117,755266,772905,790800,793356,794401,803129,820259,824170,826032,826340,836175,841901,858529,887302,892887,897178,913048,920117,945519,963829,975619,986198,1017884,1020947,1035033,1041506,1046157,1062987,1083769,1100750,1130568,1139285,1146548,1147113,1151733,1167647,1167702,1173785,


// for(uint32_t k = 0; k < 100; ++k) {   
//     // float* a=data+queryGTlabel[k]*d;
//     float* b=queryset;
//     float dist=0;
//     for(uint32_t i = 0; i < d; ++i) {             
//         dist += pow( *(data+queryGTlabel[k]*d +i) -*(queryset +i),2); 
//     } 
//     cout<<queryGTlabel[k]<<",";
//     // cout<<dist<<",";
// }
// cout<<endl;
// for(uint32_t k = 0; k < 100; ++k) {    
//     float* a=data+output_[k]*d;
//     float* b=queryset;
//     float dist=0;
//     for(uint32_t i = 0; i < d; ++i) {    
//         dist += pow(a[i]-b[i],2); 
//     } 
//     cout<<output_[k]<<",";
//     // cout<<dist<<",";
// }
// cout<<endl;